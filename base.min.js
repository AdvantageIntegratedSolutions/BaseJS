functionBaseConnect(config){this.config=config;this.inverseTables=BaseHelpers.inverseTables(config.tables);this.apptoken=config.token;this.async=config.async||false;this.databaseId=config.databaseId;this.username=config.username;this.password=config.password;this.quickstart=config.quickstart||false;this.ticket=config.ticket;this.realm=config.realm;this.proxies={local:"https://3soqpphli2.execute-api.us-east-1.amazonaws.com/testing/qbase/db/",quickstart:"https://ken9jrw9tg.execute-api.us-east-1.amazonaws.com/quickstart/proxy"};this.post=function(data,callback,handler){vartype=data.type||"API";varaction=type+"_"+data.action;varpostData=this.buildPostData(data.dbid,data);vardbid="";if(!data.dbid){dbid="main";}else{if(this.config&&data.dbid!="main"){if(data.dbid==this.databaseId){dbid=this.databaseId;}else{dbid=this.config.tables[data.dbid].dbid;};}else{dbid=data.dbid;};};returnthis.xmlPost(dbid,action,postData,callback,handler);};this.generateQuickbaseQuery=function(query){varvalidQuery=[];varhandleEx=function(key,value){return"{'"+key+"'.EX.'"+value+"'}";};varhandleOtherOperators=function(key,value){varoperators=Object.keys(value);varqueryParts=[];for(vari=0;i<operators.length;i++){varoperator=operators[i];varcompareValue=value[operator];varqueryPart="";if(operator=="in"){varqueryParts=[];compareValue.forEach(function(v){queryParts.push("{'"+key+"'.EX.'"+v+"'}");});queryPart="("+queryParts.join("OR")+")";}else{queryPart="{'"+key+"'."+operator+".'"+compareValue+"'}";};queryParts.push(queryPart);};returnqueryParts.join("AND");};varhandleOr=function(key,value){varqueryPart=[];value.forEach(function(query){varkey=Object.keys(query)[0];varvalue=query[key];if(typeofvalue=="object"){varquery=handleOtherOperators(key,value);queryPart.push(query);}else{varquery=handleEx(key,value);queryPart.push(query);};});return"("+queryPart.join("OR")+")";};for(keyinquery){varvalue=query[key];varqueryPart="";if(key=="or"){queryPart=handleOr(key,value);}else{if(typeofvalue=="object"){queryPart=handleOtherOperators(key,value);}else{queryPart=handleEx(key,query[key]);};};validQuery.push(queryPart);};validQuery=validQuery.join("AND");returnvalidQuery;};this.replaceFieldNames=function(query,dbid){varconfig=this.config;query=query.split(/(}AND|\)AND|}OR|\)OR)/).map(function(queryPart){if(!/(}AND|\)AND|}OR|\)OR)/.test(queryPart)){varfield=queryPart.match(/\{'*(.*)'\..*'/)[1];if(isNaN(field)){varfid=config.tables[dbid][field];queryPart=queryPart.replace(field,fid);};};returnqueryPart;});returnquery.join("");};this.replaceOptionFieldNames=function(value,dbid){varconfig=this.config;value=value.split(".");value=value.map(function(fieldName){if(isNaN(fieldName)){varfid=config.tables[dbid][fieldName];returnfid;}else{returnfieldName;}});returnvalue.join(".");};this.handleXMLCharacters=function(string){returnstring.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g, '&quot;')      .replace(/'/g, '&apos;')  };  this.buildPostData = function(dbid, data){    var postData = ["<qdbapi>"];    if(this.apptoken){      postData.push(this.createParameter("apptoken", this.apptoken));    };    if(this.username && !this.ticket){      postData.push(this.createParameter("username", this.username));      postData.push(this.createParameter("password", this.password));    };    if(this.ticket){      postData.push(this.createParameter("ticket", this.ticket));    };    if(this.realm){      postData.push(this.createParameter("realmhost", this.realm + ".quickbase.com"));    };    for(key in data.params){      var value = data.params[key];      if(key == "clist" || key == "slist" || key == "options"){        if(typeof value == "object"){          value = value.join(".");        };        if(this.config && (key == "clist" || key == "slist")){          if(value){            value = this.replaceOptionFieldNames(value, dbid);          };        };      }else if(key == "query"){        value = this.generateQuickbaseQuery(value);        if(this.config){          value = this.replaceFieldNames(value, dbid);        };        key = "query";      };      if(value){        postData.push(this.createParameter(key, value));      };    };    for(field in data.fieldParams){      if(this.config){        var fid = this.config.tables[dbid][field];      }else{        var fid = field;      };      var fieldValue = this.handleXMLCharacters(data.fieldParams[field]);      postData.push(this.createFieldParameter(fid, fieldValue));    };    for(key in data.fidParams){      postData.push(this.createFidParameter(key, data.fidParams[key]));    };    if(data.csvData){      postData.push(this.createCSVParameter(data.csvData));    };    postData.push("</qdbapi>");    postData = postData.join("");    if(this.username || this.quickstart){      return { "xml": postData }    }else{      return postData;    };  };  this.getNode = function(response, tag){    return $(response).find(tag).text();  };  this.getRecords = function(dbid, response){    var records = $(response).find("records").find("record");    var recordsArray = [];    for(var i=0; i < records.length; i++){      var record = records[i];      var fields = $(record).find("f");      record = {}      for(var j=0; j < fields.length; j++){        var field = fields[j];        var id = parseInt($(field).attr("id"));        if($(field).find("url").text() != ""){          var url = $(field).find("url").text();          var sections = url.split("/");          var filename = sections[sections.length - 1];          var value = {"filename": filename, "url": url};        }else{          var value = $(field).text();        };        if(this.config){          var tableConfig = this.inverseTables[dbid];          if(tableConfig[id]){            id = tableConfig[id.toString()];            record[id] = value;          };        }else{          record[id] = value;        };      };      recordsArray.push(record);    };    return recordsArray;  };  this.getRids = function(response){    var records = $(response).find("records").find("record");    var ridsArray = [];    for(var i=0; i < records.length; i++){      var record = records[i];      ridsArray.push($(record).find('f[id="3"]').text());    };    return ridsArray;  };  this.getNewRids = function(response){    var rids = $(response).find("rids").find("rid");    var ridsArray = [];    for(var i=0; i < rids.length; i++){      var rid = parseInt($(rids[i]).text());      ridsArray.push(rid);    };    return ridsArray;  };  this.getFields = function(schema){    var fields = $(schema).find("fields").find("field");    var fieldsObj = {};    for(var i=0; i < fields.length; i++){      var field = fields[i];      var fieldHash = {        "fid": $(field).attr("id"),        "fieldType": $(field).attr("field_type"),        "label": $(field).find("label").text(),        "nowrap": $(field).find("nowrap").text(),        "bold": $(field).find("bold").text(),        "required": $(field).find("required").text(),        "appears_by_default": $(field).find("appears_by_default").text(),        "find_enabled": $(field).find("find_enabled").text(),        "allow_new_choices": $(field).find("allow_new_choices").text(),        "sort_as_given": $(field).find("sort_as_given").text(),        "carrychoices": $(field).find("carrychoices").text(),        "foreignkey": $(field).find("foreignkey").text(),        "unique": $(field).find("unique").text(),        "doesdatacopy": $(field).find("doesdatacopy").text(),        "fieldhelp": $(field).find("fieldhelp").text(),        "display_user": $(field).find("display_user").text(),        "default_kind": $(field).find("default_kind").text()      }      var choices = $(field).find("choices").find("choice");      if(choices.length > 0){        var fieldChoices = [];        for(var j=0; j < choices.length; j++){          var choice = $(choices[j]).text();          fieldChoices.push(choice);        };        fieldHash["choices"] = fieldChoices;      };      fieldsObj[$(field).attr("id")] = fieldHash;    };    return fieldsObj;  };  this.getReports = function(schema){    var reports = $(schema).find("queries").find("query");    var reportsObj = {};    for(var i=0; i < reports.length; i++){      var report = reports[i];      var reportHash = {        "name": $(report).find("qyname").text(),        "type": $(report).find("qytype").text(),        "criteria": $(report).find("qycrit").text(),        "clist": $(report).find("qyclst").text(),        "slist": $(report).find("qyslst").text(),        "options": $(report).find("qyopts").text()      }      reportsObj[$(report).attr("id")] = reportHash;    };    return reportsObj;  };  this.formatUserRoles = function(schema){    var users = $(schema).find("users").find("user");    var allUsers = [];    for(var i=0; i < users.length; i++){      var user = users[i];      var roles = $(user).find("roles").find("role");      var userRoles = [];      for(var j=0; j < roles.length; j++){        var role = roles[j];        var roleHash = {          "id": $(role).attr("id"),          "name": $(role).find("name").text(),          "accessId": $(role).find("access").attr("id"),          "access": $(role).find("access").text()        }        userRoles.push(roleHash);      };      var userHash = {        "id": $(user).attr("id"),        "firstName": $(user).find("firstName").text(),        "lastName": $(user).find("lastName").text(),        "lastAccess": $(user).find("lastAccess").text(),        "lastAccessAppLocal": $(user).find("lastAccessAppLocal").text(),        "roles": userRoles      };      allUsers.push(userHash);    };    return allUsers;  };  this.createParameter = function(key, value){    return "<" + key + ">" + value + "</" + key + ">";  };  this.createFieldParameter = function(fid, value){    var param = "<fieldfid='" + fid + "'";    if(value){      if(value.filename){        param += "filename='" + value.filename + "'>";        param += this.base64Encode(value.body);      }else{        param += ">"        param += value;      };    }else{      param += ">";    };    param += "</field>";    return param;  };  this.createFidParameter = function(fid, value){    return "<_fid_" + fid + ">" + value + "</_fid_" + fid + ">";  };  this.createCSVParameter = function(data){    return "<records_csv><![CDATA[" + data + "]]></records_csv>";  };  this.base64Encode = function(input){    var output = "";    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;    var i = 0;    var string = input.replace(/\r\n/g,"\n");    var utfText = "";    for(var n=0; n < string.length; n++){      var c = string.charCodeAt(n);      if (c < 128) {        utfText += String.fromCharCode(c);      }      else if((c > 127) && (c < 2048)) {        utfText += String.fromCharCode((c >> 6) | 192);        utfText += String.fromCharCode((c & 63) | 128);      }      else {        utfText += String.fromCharCode((c >> 12) | 224);        utfText += String.fromCharCode(((c >> 6) & 63) | 128);        utfText += String.fromCharCode((c & 63) | 128);      }    }    input = utfText;    while(i < input.length){      chr1 = input.charCodeAt(i++);      chr2 = input.charCodeAt(i++);      chr3 = input.charCodeAt(i++);      enc1 = chr1 >> 2;      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);      enc4 = chr3 & 63;      if(isNaN(chr2)){        enc3 = enc4 = 64;      }else if(isNaN(chr3)){        enc4 = 64;      };      output = output +      keyStr.charAt(enc1) + keyStr.charAt(enc2) +      keyStr.charAt(enc3) + keyStr.charAt(enc4);    };    return output;  };  this.xmlPost = function(dbid, action, data, callback, handler){    var url = "/db/" + dbid + "?act=" + action;    var postData = {      url: url,      data: data,      dataType: "xml",      type: "POST",      context: this    };    if(this.username){      data["realm"] = this.realm;      data["call"] = action;      data["apptoken"] = this.apptoken;      postData["dataType"] = "text";      postData["data"] = data.xml;    };    if(this.username){      postData["url"] = this.proxies.local + dbid + "?act=" + action;    }else if(this.quickstart){      postData["url"] = this.proxies.quickstart;      postData["data"] = JSON.stringify(data);    }else{      postData["contentType"] = "text/xml";    };    if(this.async == "callback"){      postData["contentType"] = "text/xml";      postData["success"] = function(xml){        return callback(handler(xml));      };      $.ajax(postData);    } else if(this.async == "promise"){      postData["dataType"] = "text";      postData["dataFilter"] = handler;      return $.ajax(postData);    }else{      var response = null;      postData["success"] = function(xml){        response = handler(xml);      };      postData["async"] = false;      $.ajax(postData);      return response;    };  };}function Base(config){  var BaseConnectInstance = new BaseConnect(config);  this.databaseId = config.databaseId;  this.Table = function(key, config){    this[key] = config;    this.tableName = key;    this.dbid = config.dbid;    this.doQuery = function(query, params, callback, handle){      var tableName = this.tableName;      this.handle = function(response){        return BaseConnectInstance.getRecords(tableName, response, "records");      };      var queryParams = {"fmt": "structured", "returnpercentage": "1"}      if(query){        var isQid = !isNaN(query);        if(isQid){          queryParams.qid = query;        }else{          queryParams.query = query;        };      }else{        queryParams.query = "{'3'.XEX.''}"      };      if(params){        var clist = params.clist;      }else{        var params = {};      };      if(BaseConnectInstance.config && !clist){        var table = BaseConnectInstance.config.tables[tableName];        var clist = [];        for(key in table){          var value = table[key];          if(!isNaN(value)){            clist.push(key);          };        };        params.clist = clist.join(".");      };      queryParams.clist = params.clist;      queryParams.slist = params.slist      queryParams.options = params.options      var data = {        dbid: tableName,        action: "DoQuery",        params: queryParams      };      if(handle){        this.handle = handle;      };      return BaseConnectInstance.post(data, callback, this.handle);    };    this.find = function(rid, callback){      var tableName = this.tableName;      this.handle = function(response){        var records = BaseConnectInstance.getRecords(tableName, response, "records");        if(records.length > 0){          if(records.length > 1){            return records;          }else{            return records[0];          };        }else{          return {};        };      };      if(Object.prototype.toString.call(rid) == "[objectArray]"){        var query = { "3": { in: rid }}      }else{        var query = { "3": rid };      };      return this.doQuery(query, null, callback, this.handle);    };    this.first = function(query, params, callback){      var tableName = this.tableName;      this.handle = function(response){        var records = BaseConnectInstance.getRecords(tableName, response, "records");        if(records.length > 0){          return records[0];        }else{          return {};        };      };      return this.doQuery(query, params, callback, this.handle);    };    this.last = function(query, params, callback){      var tableName = this.tableName;      this.handle = function(response){        var records = BaseConnectInstance.getRecords(tableName, response, "records");        if(records.length > 0){          return records[records.length - 1];        }else{          return {};        };      };      return this.doQuery(query, params, callback, this.handle);    };    this.all = function(params, callback){      var tableName = this.tableName;      this.handle = function(response){        var records = BaseConnectInstance.getRecords(tableName, response, "records");        if(records.length > 0){          return records;        }else{          return {};        };      };      return this.doQuery({ "3": { XEX: "" } }, params, callback, this.handle);    };    this.getRids = function(query, callback){      this.handle = function(response){        return BaseConnectInstance.getRids(response);      };      params = {        clist: "3"      };      if(!query){        query = { "3": { XEX: "" } }      };      return this.doQuery(query, params, callback, this.handle);    };    this.doQueryCount = function(query, callback){      this.handle = function(response){        return BaseConnectInstance.getNode(response, "numMatches");      };      var data = {        dbid: this.tableName,        action: "DoQueryCount",        params: {"query": query}      };      return BaseConnectInstance.post(data, callback, this.handle);    };    this.addRecord = function(fieldParams, callback){      this.handle = function(response){        return parseInt(BaseConnectInstance.getNode(response, "rid"));      };      var data = {        dbid: this.tableName,        action: "AddRecord",        fieldParams: fieldParams      };      return BaseConnectInstance.post(data, callback, this.handle);    };    this.editRecord = function(rid, fieldParams, callback){      this.handle = function(response){        var rid = BaseConnectInstance.getNode(response, "rid");        return rid ? true : false;      };      var data = {        dbid: this.tableName,        action: "EditRecord",        fieldParams: fieldParams,        params: {"rid": rid}      }      return BaseConnectInstance.post(data, callback, this.handle);    };    this.changeRecordOwner = function(rid, owner, callback){      this.handle = function(response){        return true;      };      var data = {        dbid: this.tableName,        action: "ChangeRecordOwner",        params: {"rid": rid, "newowner": owner}      };      return BaseConnectInstance.post(data, callback, this.handle);    };    this.copyMasterDetail = function(params, callback){      this.handle = function(response){        return BaseConnectInstance.getNode(response, "numCreated");      };      var data = {        dbid: this.tableName,        action: "CopyMasterDetail",        params: params      };      return BaseConnectInstance.post(data, callback, this.handle);    };    this.getRecordInfo = function(rid, callback){      this.handle = function(response){        var allFields = {};        var fields = $(response).find("field");        for(var i=0; i < fields.length; i++){          var field = fields[i];          var fieldHash = {            "name": BaseConnectInstance.getNode(field, "name"),            "type": BaseConnectInstance.getNode(field, "type"),            "value": BaseConnectInstance.getNode(field, "value")          };          allFields[$(field).find("fid").text()] = fieldHash;        };        var info = {          "rid": BaseConnectInstance.getNode(response, "rid"),          "num_fields": BaseConnectInstance.getNode(response, "num_fields"),          "update_id": BaseConnectInstance.getNode(response, "update_id"),          "fields": allFields        };        return info;      };      var data = {        dbid: this.tableName,        action: "GetRecordInfo",        params: { "rid": rid }      };      return BaseConnectInstance.post(data, callback, this.handle);    };    this.deleteRecord = function(rid, callback){      this.handle = function(response){        var rid = BaseConnectInstance.getNode(response, "rid");        return rid ? true : false;      };      var data = {        dbid: this.tableName,        action: "DeleteRecord",        params: {"rid": rid}      };      return BaseConnectInstance.post(data, callback, this.handle);    };    this.purgeRecords = function(query, callback){      this.handle = function(response){        var numberOfRecordDeleted = BaseConnectInstance.getNode(response, "num_records_deleted");        return parseInt(numberOfRecordDeleted);      };      var data = {        dbid: this.tableName,        action: "PurgeRecords",        params: {"query": query}      };      return BaseConnectInstance.post(data, callback, this.handle);    };    this.importFromCSV = function(csvArray, callback){      this.handle = function(response){        return BaseConnectInstance.getNewRids(response);      };      var csv = "";      var clist = [];      for(key in csvArray[0]){        if(BaseConnectInstance.config){          tableConfig = BaseConnectInstance.config.tables[this.tableName];          key = tableConfig[key];        };        clist.push(key);      };      clist = clist.join(".");      for(var i=0; i < csvArray.length; i++){        var row = csvArray[i];        var rowValues = [];        for(key in row){          value = row[key];          value = value.toString().replace(/"/g,'""');rowValues.push('"' + value + '"');};rowValues.join(",")rowValues+="\n"csv+=(rowValues);};vardata={dbid:this.tableName,action:"ImportFromCSV",params:{"clist":clist},csvData:csv}returnBaseConnectInstance.post(data,callback,this.handle);};this.getTableFields=function(callback){this.handle=function(response){returnBaseConnectInstance.getFields(response);};vardata={dbid:this.tableName,action:"GetSchema"};returnBaseConnectInstance.post(data,callback,this.handle);};this.genAddRecordForm=function(params,callback){this.handle=function(response){returnresponse;};vardata={dbid:this.tableName,action:"GenAddRecordForm",fidParams:params};returnBaseConnectInstance.post(data,callback,this.handle);};this.getNumRecords=function(callback){this.handle=function(response){returnparseInt(BaseConnectInstance.getNode(response,"num_records"));};vardata={dbid:this.tableName,action:"GetNumRecords"};returnBaseConnectInstance.post(data,callback,this.handle);};this.setFieldProperties=function(fid,params,callback){this.handle=function(response){varerror=BaseConnectInstance.getNode(response,"errcode");returnerror==0?true:false;};params["fid"]=fid;vardata={dbid:this.tableName,action:"SetFieldProperties",params:params};returnBaseConnectInstance.post(data,callback,this.handle);};this.getTableReports=function(callback){this.handle=function(response){returnBaseConnectInstance.getReports(response);};vardata={dbid:this.tableName,action:"GetSchema"};returnBaseConnectInstance.post(data,callback,this.handle);};};this.setTables=function(tables){for(keyintables){this[key]=newthis.Table(key,tables[key]);};};this.setTables(config.tables);this.getOneTimeTicket=function(callback){this.handle=function(response){returnBaseConnectInstance.getNode(response,"ticket");};vardata={action:"GetOneTimeTicket"};returnBaseConnectInstance.post(data,callback,this.handle);};this.authenticate=function(auth,hours,callback){this.handle=function(response){returnBaseConnectInstance.getNode(response,"ticket");};vardata={action:"Authenticate",params:{"hours":hours}};if(auth.ticket){data["ticket"]=auth.ticket;};if(auth.username&&auth.password){data["username"]=auth.username;data["password"]=auth.password;};returnBaseConnectInstance.post(data,callback,this.handle);};this.signOut=function(callback){this.handle=function(response){varerror=BaseConnectInstance.getNode(response,"errcode");returnerror=="0"?true:false;};vardata={action:"SignOut",};returnBaseConnectInstance.post(data,callback,this.handle);};this.getDBVar=function(name,callback){this.handle=function(response){returnBaseConnectInstance.getNode(response,"value");};vardata={dbid:this.databaseId,action:"GetDBvar",params:{"varname":name}};returnBaseConnectInstance.post(data,callback,this.handle)};this.setDBVar=function(name,value,callback){this.handle=function(response){returntrue;};vardata={dbid:this.databaseId,action:"SetDBvar",params:{"varname":name,"value":value}};returnBaseConnectInstance.post(data,callback,this.handle);};this.uploadPage=function(id,name,body,callback){this.handle=function(response){returnBaseConnectInstance.getNode(response,"pageID");};varparams={"pagetype":"1","pagebody":body};if(id){params["pageid"]=id;}elseif(name){params["pagename"]=name;};vardata={dbid:this.databaseId,action:"AddReplaceDBPage",params:params};returnBaseConnectInstance.post(data,callback,this.handle);};this.deletePage=function(pageId,callback){this.handle=function(response){varerror=BaseConnectInstance.getNode(response,"errcode");returnerror=="0"?true:false;};vardata={dbid:this.databaseId,action:"PageDelete",type:"QBI",params:{"pageid":pageId}};returnBaseConnectInstance.post(data,callback,this.handle);};this.getDbPage=function(pageId,callback){this.handle=function(response){returnBaseConnectInstance.getNode(response,"pagebody");};vardata={dbid:this.databaseId,action:"GetDBPage",type:"API",params:{"pageID":pageId}};returnBaseConnectInstance.post(data,callback,this.handle);};this.cloneDatabase=function(params,callback){this.handle=function(response){returnBaseConnectInstance.getNode(response,"newdbid");};vardata={dbid:this.databaseId,action:"CloneDatabase",type:"API",params:params};returnBaseConnectInstance.post(data,callback,this.handle);};this.createDatabase=function(name,description,createAppToken,callback){this.handle=function(response){returnBaseConnectInstance.getNode(response,"dbid");};vardata={action:"CreateDatabase",type:"API",params:{"dbname":name,"dbdesc":description,"createapptoken":createAppToken||false}};returnBaseConnectInstance.post(data,callback,this.handle);};this.deleteDatabase=function(callback){this.handle=function(response){varerror=BaseConnectInstance.getNode(response,"errcode");returnerror=="0"?true:false;};vardata={dbid:this.databaseId,action:"DeleteDatabase",type:"API"};returnBaseConnectInstance.post(data,callback,this.handle);};this.renameApp=function(name,callback){this.handle=function(response){varerror=BaseConnectInstance.getNode(response,"errcode");returnerror=="0"?true:false;};vardata={dbid:this.databaseId,action:"RenameApp",type:"API",params:{"newappname":name}};returnBaseConnectInstance.post(data,callback,this.handle);};this.findDbByName=function(name,callback){this.handle=function(response){returnBaseConnectInstance.getNode(response,"dbid");};vardata={action:"FindDBByName",type:"API",params:{"dbname":name}};returnBaseConnectInstance.post(data,callback,this.handle);};this.getAppDtmInfo=function(callback){this.handle=function(response){varallTables={};vartables=$(response).find("tables").find("table");for(vari=0;i<tables.length;i++){vartable=tables[i];vartableHash={"lastModifiedTime":$(table).find("lastModifiedTime").text(),"lastRecModTime":$(table).find("lastRecModTime").text()};allTables[$(table).attr("id")]=tableHash;};varinfo={"requestTime":BaseConnectInstance.getNode(response,"RequestTime"),"requestNextAllowedTime":BaseConnectInstance.getNode(response,"RequestNextAllowedTime"),"lastModifiedTime":BaseConnectInstance.getNode(response,"lastModifiedTime"),"lastRecModTime":BaseConnectInstance.getNode(response,"lastRecModTime"),"tables":allTables};returninfo;};vardata={action:"GetAppDTMInfo",type:"API",params:{"dbid":this.databaseId}};returnBaseConnectInstance.post(data,callback,this.handle);};this.getDbInfo=function(callback){this.handle=function(response){varinfo={"dbname":BaseConnectInstance.getNode(response,"dbname"),"lastRecModTime":BaseConnectInstance.getNode(response,"lastRecModTime"),"createdTime":BaseConnectInstance.getNode(response,"createdTime"),"numRecords":BaseConnectInstance.getNode(response,"numRecords"),"mgrID":BaseConnectInstance.getNode(response,"mgrID"),"mgrName":BaseConnectInstance.getNode(response,"mgrName"),"version":BaseConnectInstance.getNode(response,"version"),"time_zone":BaseConnectInstance.getNode(response,"time_zone")};returninfo;};vardata={dbid:this.databaseId,action:"GetDBInfo",type:"API"};returnBaseConnectInstance.post(data,callback,this.handle);};this.grantedDbs=function(params,callback){this.handle=function(response){varallDatabases=[];vardatabases=$(response).find("databases").find("dbinfo");for(vari=0;i<databases.length;i++){vardatabase=databases[i];vardatabaseHash={"dbname":BaseConnectInstance.getNode(database,"dbname"),"dbid":BaseConnectInstance.getNode(database,"dbid")};allDatabases.push(databaseHash);};returnallDatabases;};vardata={action:"GrantedDBs",type:"API",params:params};returnBaseConnectInstance.post(data,callback,this.handle);};this.getUserInfo=function(email,callback,handler){this.handle=function(response){varuser=$(response).find("user");user={"id":$(user).attr("id"),"firstName":$(user).find("firstName").text(),"lastName":$(user).find("lastName").text(),"login":$(user).find("login").text(),"email":$(user).find("email").text(),"screenName":$(user).find("screenName").text(),"isVerified":$(user).find("isVerified").text(),"externalAuth":$(user).find("externalAuth").text()};returnuser;};if(!email){email="";};vardata={dbid:"main",action:"GetUserInfo",params:{"email":email}};returnBaseConnectInstance.post(data,callback,this.handle);};this.getUserRoles=function(callback){this.handle=function(response){returnBaseConnectInstance.formatUserRoles(response);};vardata={dbid:this.databaseId,action:"UserRoles"};returnBaseConnectInstance.post(data,callback,this.handle);};this.changeUserRole=function(userId,roleId,newRoleId,callback){this.handle=function(response){returntrue;};vardata={dbid:this.databaseId,action:"ChangeUserRole",params:{userId:userId,roleId:roleId}};if(newRoleId){data["params"]["newRoleId"]=newRoleId;};returnBaseConnectInstance.post(data,callback,this.handle);};}varBaseHelpers={options:{timeZone:'utc',format:'hours'},inverseTables:function(config){varinverseTables={};for(vartableinconfig){varnewObject={};for(varfieldinconfig[table]){newObject[config[table][field].toString()]=field;};inverseTables[table]=newObject;};returninverseTables;},getUrlParam:function(name){name=name.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");varregex=newRegExp("[\\?&]"+name+"=([^&#]*)"),results=regex.exec(location.search);returnresults==null?"":decodeURIComponent(results[1].replace(/\+/g," "));},formatDateElement:function(element){element=element.toString();if(element.length==1){element="0"+element;};returnelement;},dateToString:function(milliseconds){if(milliseconds){vardate=newDate(parseInt(milliseconds));varmonth=this.formatDateElement((date.getUTCMonth()+1));varday=this.formatDateElement(date.getUTCDate());date=[month,day,date.getUTCFullYear()].join("-");returndate;}else{return'';}},dateTimeToString:function(milliseconds,timeZone){vartoday=newDate();vartimeZone=timeZone?timeZone.toLowerCase().trim():this.options.timeZone.toLowerCase();Date.prototype.stdTimezoneOffset=function(){varjan=newDate(this.getFullYear(),0,1);varjul=newDate(this.getFullYear(),6,1);returnMath.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());}Date.prototype.dst=function(){returnthis.getTimezoneOffset()<this.stdTimezoneOffset();}varzoneOffsets={"utc":0,"eastern":today.dst()?-4:-5,"central":today.dst()?-5:-6,"mountain":today.dst()?-6:-7,"pacific":today.dst()?-7:-8};varoffset=zoneOffsets[timeZone];if(milliseconds){vardate=newDate(parseInt(milliseconds)+(60*60*1000*offset));varyear=this.formatDateElement((date.getUTCFullYear));varmonth=this.formatDateElement((date.getUTCMonth()+1));varday=this.formatDateElement(date.getUTCDate());varhours=this.formatDateElement(date.getUTCHours());varminutes=this.formatDateElement(date.getUTCMinutes());varseconds=this.formatDateElement(date.getUTCSeconds());vardateTime=[month,day,date.getUTCFullYear()].join("-");varampm=parseInt(hours)>=12?'PM':'AM';hours=hours%12;hours=hours?hours:12;dateTime+=" "dateTime+=[hours,minutes].join(":")dateTime+=" "+ampmreturndateTime;}else{return'';}},durationToString:function(milliseconds,format){varms=parseInt(milliseconds);varresult;varformat=format?format.trim().toLowerCase():this.options.format.toLowerCase();varformatType={"days":function(){returnms/86400000;},"hours":function(){returnms/3600000;},"minutes":function(){returnms/60000;},"seconds":function(){returnms/1000;}};if(milliseconds){if(formatType[format]){result=formatType[format]();}else{result=formatType["hours"]();console.log("The format parameter passed to BaseHelpers.durationToString() was incorrect. Using the format for 'hours' instead.");}result=Math.round(result*100)/100;returnresult.toString();}else{return'';}},timeOfDayToString:function(milliseconds){vartimeOfDay="";timeOfDay=newDate()timeOfDay.setHours("");timeOfDay.setMinutes("");timeOfDay.setSeconds("");timeOfDay.setMilliseconds(milliseconds);varhours=timeOfDay.getHours().toString();varminutes=timeOfDay.getMinutes().toString();varampm=hours>12?"pm":"am";hours=hours%12;hours=hours?hours:12;minutes=minutes.length>1?minutes:"0"+minutes;timeOfDay=hours+":"+minutes+" "+ampmreturntimeOfDay;},redirectToEditForm:function(dbid,rid){window.location="/db/"+dbid+"?a=er&rid="+rid;},redirectToViewForm:function(dbid,rid){window.location="/db/"+dbid+"?a=dr&rid="+rid;},downloadFile:function(dbid,rid,fid,version){varversion=version||0;window.location="https://www.quickbase.com/up/"+dbid+"/a/r"+rid+"/e"+fid+"/v"+version;}};